# Example from here: https://aws.amazon.com/blogs/compute/building-deploying-and-operating-containerized-applications-with-aws-fargate/
AWSTemplateFormatVersion: '2010-09-09'
Outputs:
  ALBURL:
    Description: URL of the ALB
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ALB
          - DNSName

Parameters:
  NginxImage:
    Default: nginx:alpine
    Description: The nginx container image to run (e.g. nginx:alpine)
    Type: String

Resources:

  # Step 1 – Create an ECS cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Fargate

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'

  # Step 2 – Create a task definition, CloudWatch log group, and task execution role
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: TaskExecutionPolicy
    Properties:
      ContainerDefinitions:
      - Essential: 'true'
        Image:
          Ref: NginxImage
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: CWLogGroup
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: nginx
        # TODO: Update?
        Name: nginx
        PortMappings:
        - ContainerPort: 80
      Cpu: '512'
      ExecutionRoleArn:
        Fn::GetAtt:
        - TaskExecutionRole
        - Arn
      # Family: calfishernginx
      Memory: 1GB
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE

  CWLogGroup:
    Type: AWS::Logs::LogGroup

  # Step 3 – Create an Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: PubSubnetAz1
      - Ref: PubSubnetAz2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - TargetGroupArn:
          Ref: ALBTargetGroup
        Type: forward
      LoadBalancerArn:
        Ref: ALB
      Port: '80'
      Protocol: HTTP

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      VpcId:
        Ref: VPC

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '10'
      HealthyThresholdCount: '4'
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: '3'
      VpcId:
        Ref: VPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteViaIgw
      SubnetId:
        Ref: PubSubnetAz1

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteViaIgw
      SubnetId:
        Ref: PubSubnetAz2

  PubSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - a
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: VPC

  PubSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Join:
        - ''
        - - Ref: AWS::Region
          - b
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: VPC

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteViaIgw

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  Service:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: nginx
        ContainerPort: 80
        TargetGroupArn:
          Ref: ALBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - Ref: TaskSecurityGroup
          Subnets:
          - Ref: PubSubnetAz1
          - Ref: PubSubnetAz2
      ServiceName: calfisher
      TaskDefinition:
        Ref: TaskDefinition

  TaskExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ecr:GetAuthorizationToken
          - ecr:BatchCheckLayerAvailability
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - "*"
        Version: '2012-10-17'
      PolicyName: fargate-execution
      Roles:
      - Ref: TaskExecutionRole

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Task Security Group
      SecurityGroupIngress:
      - FromPort: '80'
        IpProtocol: tcp
        SourceSecurityGroupId:
          Fn::GetAtt:
          - ALBSecurityGroup
          - GroupId
        ToPort: '80'
      VpcId:
        Ref: VPC

